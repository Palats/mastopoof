syntax = "proto3";

package mastopoof;

service Mastopoof {
    // Check if the user is already authenticated.
    rpc Login(LoginRequest) returns (LoginResponse);

    rpc Logout(LogoutRequest) returns (LogoutResponse);

    // Support for Mastodon oauth flow.
    rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse);
    rpc Token(TokenRequest) returns (TokenResponse);

    // List statuses available in the stream, inserting from the pool
    // if needed.
    rpc List(ListRequest) returns (ListResponse);
    // Set the position of the read-marker.
    rpc SetRead(SetReadRequest) returns (SetReadResponse);

    // Contact the Mastodon server and add more statuses to the pool.
    rpc Fetch(FetchRequest) returns (FetchResponse);
}

message PingRequest {
    string msg = 1;
}

message PingResponse {
    string msg = 2;
}

message UserInfo {
    // Default stream ID for that user.
    int64 default_stid = 1;
}

// Information about the state of the stream.
// This is independent of what the response containing is about - for example,
// `last_position` contains the last position in the stream, no matter what
// `List` was returning.
message StreamInfo {
    int64 stid = 1;

    // Position of last-read item.
    int64 last_read = 2;
    // Position of the first item in the stream.
    int64 first_position = 5;
    // Position of the last item in the stream.
    int64 last_position = 3;
    // Untriaged statuses in the pool and not yet added to the stream.
    int64 remaining_pool = 4;
}

message LoginRequest {}

message LoginResponse {
    // Empty if user is not logged in.
    UserInfo user_info = 1;
}

message LogoutRequest{}
message LogoutResponse{}

message AuthorizeRequest {
    // The mastodon server address the user wants to use.
    // Typically should start with `https://`
    string server_addr = 1;

    // User provided invite code.
    string invite_code = 2;
}
message AuthorizeResponse {
    // The address for asking the user authorization.
    // That's the `/oauth/authorize` end point to use on the mastodon server.
    string authorize_addr = 1;
}

message TokenRequest {
    // The mastodon server address the user wants to use.
    // Typically should start with `https://`
    // Must be the same as the one provided before to Authorize.
    string server_addr = 1;

    // The authorization code obtained from the authorize request sent to the Mastodon server.
    string auth_code = 2;
}

message TokenResponse {
    // If successful, it means that we're logged in.
    UserInfo user_info = 1;
}

// An item in the stream - i.e., a status with some metadata.
message Item {
    MastodonStatus status = 1;
    int64 position = 2;
    // The mastodon account this status was fetched from.
    Account account = 3;
}

// A single mastodon status.
message MastodonStatus {
    // JSON encoded mastodon status.
    string content = 1;
}

// A Mastodon account info.
message Account {
    // Mastodon server.
	// E.g., `https://mastodon.social`
	string server_addr = 1;
	// The Mastodon account ID on the server.
	// E.g., `123456789765432132`
	string account_id = 2;
	// The Mastodon username
	// E.g., `foobar`
    string username = 3;
}

message ListRequest {
    enum Direction {
        // If unspecified - behaves as "FORWARD".
        DEFAULT = 0;
        // Get more recent statuses with item > (strict) request.position.
        FORWARD = 1;
        // Go back in the history of the stream.
        // Returns item < (strict) request.position.
        BACKWARD = 2;
    }
    Direction direction = 1;

    // Continuation position obtained from a previous request.
    // When specified, must refer to an existing position returned by a list
    // request before, except if set to direction=FORWARD, position=0.
    // If zero for FORWARD, gives statuses around last_read.
    // Cannot be zero for BACKWARD.
    int64 position = 2;

    // The stream to fetch from.
    int64 stid = 3;
}

message ListResponse {
    // Ordered list of statuses.
    repeated Item items = 1;

    // Position to use for continuation requests.
    // In practice, position of the first and last item of the response.
    // Zero if there are no items.
    int64 backward_position = 2;
    int64 forward_position = 3;

    StreamInfo stream_info = 9;

    reserved 5, 7, 8, 4, 6;
    reserved "last_read", "last_position", "remaining_pool", "backward_state", "forward_state";
}

message SetReadRequest {
    // Position to set the last_read to.
    int64 last_read = 1;

    // The stream to set the read marker to.
    int64 stid = 2;

    enum Mode {
        // Fails.
        UNKNOWN = 0;
        // Set the last read position no matter the previous value.
        ABSOLUTE = 1;
        // Set the last read position only if it is greater than the previous one.
        ADVANCE = 2;
    }
    Mode mode = 3;
}

message SetReadResponse {
    StreamInfo stream_info = 1;
}

message FetchRequest {
    // The stream pool to add statuses to.
    int64 stid = 1;
}

message FetchResponse {
    StreamInfo stream_info = 1;
    int64 fetched_count = 2;

    enum Status {
        UNKNOWN = 0;
        // More statuses are likely to be fetcheable right now.
        MORE = 1;
        // No more statuses available from Mastodon server right now.
        DONE = 2;
    }
    Status status = 3;
}