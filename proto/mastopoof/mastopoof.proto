syntax = "proto3";

package mastopoof;

service Mastopoof {
    rpc Ping(PingRequest) returns (PingResponse);

    rpc Login(LoginRequest) returns (LoginResponse);
    rpc Logout(LogoutRequest) returns (LogoutResponse);

    // Fetch statuses.
    rpc Fetch(FetchRequest) returns (FetchResponse);
    // Set the position of the read-marker.
    rpc SetRead(SetReadRequest) returns (SetReadResponse);
}

message PingRequest {
    string msg = 1;
}

message PingResponse {
    string msg = 2;
}

message UserInfo {
    // Default stream ID for that user.
    int64 default_stid = 1;
}

message LoginRequest {
    int64 tmp_stid = 1;
}

message LoginResponse {
    UserInfo user_info = 1;
}

message LogoutRequest{}
message LogoutResponse{}

// An item in the stream - i.e., a status with some metadata.
message Item {
    MastodonStatus status = 1;
    int64 position = 2;
}

// A single mastodon status.
message MastodonStatus {
    // JSON encoded mastodon status.
    string content = 1;
}

message FetchRequest {
    enum Direction {
        // If unspecified - behaves as "INITIAL".
        DEFAULT = 0;
        // Get more recent statuses.
        FORWARD = 1;
        // Go back in the history of the stream.
        BACKWARD = 2;
    }
    Direction direction = 1;

    // Continuation position obtained from a previous request.
    // Cannot be zero for BACKWARD.
    // If zero for FORWARD, gives statuses around last_read.
    int64 position = 2;
}

message FetchResponse {
    // Ordered list of statuses.
    // If empty, another INITIAL request will need to be done later.
    repeated Item items = 1;

    // Position to use for continuation requests.
    // In practice, position of the first and last item of the response.
    // Zero if there are no items.
    int64 backward_position = 2;
    int64 forward_position = 3;

    // Whether more statuses are available on each end. That includes statuses
    // which might not be yet inserted in the stream.
    enum State {
        // Information is not available.
        UNKNOWN = 0;
        // More statuses are potentially available now.
        PARTIAL = 1;
        // No available extra statuses right now.
        DONE = 2;
    }
    State backward_state = 4;
    State forward_state = 6;

    // Position of last-read item.
    // Can be outside the range of items directly returned in this response.
    int64 last_read = 5;
    // Position of the last item in the stream. This is specified even if the
    // returned statuses are in the middle of the stream and do not include the
    // last one.
    int64 last_position = 7;
    // Remaining status still in the pool and not yet added to the stream.
    int64 remaining_pool = 8;
}

message SetReadRequest {
    // Position to set the last_read to.
    int64 last_read = 1;
}

message SetReadResponse {}